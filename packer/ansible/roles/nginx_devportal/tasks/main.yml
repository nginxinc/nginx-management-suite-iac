# Copyright (c) F5, Inc.
#
# This source code is licensed under the Apache License, Version 2.0 license found in the
# LICENSE file in the root directory of this source tree.

---

## Set up NGINX repositories
- name: create nginx ssl directory
  ansible.builtin.file:
    state: directory
    path: /etc/ssl/nms

- name: Create Nginx Repo TLS key
  ansible.builtin.copy:
    src: "{{ nginx_license.key }}"
    dest: "/etc/ssl/nms/nms-repo.key"
    mode: "0644"

- name: Create Nginx Repo TLS cert
  ansible.builtin.copy:
    src: "{{ nginx_license.certificate }}"
    dest: "/etc/ssl/nms/nms-repo.crt"
    mode: "0644"

- name: 'Install Debian pre-requisite packages'
  ansible.builtin.apt:
    name: "{{ item }}"
    update_cache: true
    state: present
  when: ansible_os_family == "Debian"
  loop:
    - gpg

# Add apt signing key from NGINX
- name: 'NGINX - Add apt key'
  ansible.builtin.apt_key:
    url: "{{ item }}"
    state: present
  loop:
    - "https://cs.nginx.com/static/keys/nginx_signing.key"
  when: ansible_os_family == "Debian"

# Download apt config file for NGINX
- name: 'NGINX - Add apt conf'
  ansible.builtin.blockinfile:
    path: /etc/apt/apt.conf.d/91nms
    create: true
    block: |
      Acquire::https::{{ devportal_repo_url }}::Verify-Peer "true";
      Acquire::https::{{ devportal_repo_url }}::Verify-Host "true";
      Acquire::https::{{ devportal_repo_url }}::SslCert     "/etc/ssl/nms/nms-repo.crt";
      Acquire::https::{{ devportal_repo_url }}::SslKey      "/etc/ssl/nms/nms-repo.key";
    mode: 0444
  when: ansible_os_family == "Debian"

- name: Add NMS APT repository
  ansible.builtin.apt_repository:
    repo: "deb https://pkgs.nginx.com/nms/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} nginx-plus"
    state: present
    update_cache: false
    filename: "{{ devportal_repo_name }}"
  when: ansible_os_family == "Debian"

- name: NGINX - Add yum/dnf key
  ansible.builtin.rpm_key:
    state: present
    key: https://nginx.org/keys/nginx_signing.key
  when:
    - ansible_os_family == "RedHat"

- name: Add NMS RHEL/CentOS YUM repository 
  ansible.builtin.yum_repository:
    name: nms
    description: NMS Centos / RHEL
    baseurl: "https://pkgs.nginx.com/nms/centos/{{ ansible_distribution_major_version }}/$basearch"
    gpgcheck: yes
    enabled: yes
    file: nms
    sslclientcert: "/etc/ssl/nms/nms-repo.crt"
    sslclientkey: "/etc/ssl/nms/nms-repo.key"
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version is version('7', '>=')

- name: Add NMS Amazon YUM repository 
  ansible.builtin.yum_repository:
    name: nms
    description: NMS AmazonLinux
    baseurl: "https://pkgs.nginx.com/nms/amzn2/{{ ansible_distribution_major_version }}/$basearch"
    gpgcheck: yes
    enabled: yes
    file: nms
    sslclientcert: "/etc/ssl/nms/nms-repo.crt"
    sslclientkey: "/etc/ssl/nms/nms-repo.key"
  when: ansible_distribution == "Amazon"

## Installation
- name: 'DevPortal - Install RPM package via yum'
  ansible.builtin.yum:
    name: "{{ devportal_package }}-{{ devportal_version }}*"
    state: present
    disable_gpg_check: "{{ devportal_disable_gpg_check }}"
  when: ansible_facts.pkg_mgr == "yum"

- name: 'DevPortal - Install RPM package via dnf'
  ansible.builtin.dnf:
    name: "{{ devportal_package }}-{{ devportal_version }}*"
    state: present
    disable_gpg_check: "{{ devportal_disable_gpg_check }}"
  when: ansible_facts.pkg_mgr == "dnf"

- name: 'DevPortal - Install DEB package via apt'
  ansible.builtin.apt:
    name: "{{ devportal_package }}={{ devportal_version }}*"
    update_cache: true
    state: present
  when: ansible_facts.pkg_mgr == "apt"

- name: 'DevPortal UI - Install RPM package via yum'
  ansible.builtin.yum:
    name: "{{ devportal_ui_package }}-{{ devportal_version }}*"
    state: present
    disable_gpg_check: "{{ devportal_disable_gpg_check }}"
  when: 
    - ansible_facts.pkg_mgr == "yum"
    - with_devportal_ui

- name: 'DevPortal UI - Install RPM package via dnf'
  ansible.builtin.dnf:
    name: "{{ devportal_ui_package }}-{{ devportal_version }}*"
    state: present
    disable_gpg_check: "{{ devportal_disable_gpg_check }}"
  when:
    - ansible_facts.pkg_mgr == "dnf"
    - with_devportal_ui

- name: 'DevPortal UI - Install DEB package via apt'
  ansible.builtin.apt:
    name: "{{ devportal_ui_package }}={{ devportal_version }}*"
    update_cache: true
    state: present
  when: 
    - ansible_facts.pkg_mgr == "apt"
    - with_devportal_ui

## configuration

# data
- name: create devportal data directory
  ansible.builtin.file:
    path: "{{ devportal_data_path }}"
    state: directory
    mode: '0755'
    owner: "{{ devportal_user }}"
    group: "{{ devportal_group }}"
  when: devportal_db_type == "sqlite"

- name: create devportal ssl directory
  ansible.builtin.file:
    path: "{{ devportal_config_path }}/ssl"
    state: directory
    mode: '0750'
    owner: "{{ devportal_user }}"
    group: "{{ devportal_group }}"
  when: devportal_pg_client_ssl or with_devportal_ui

# config

- name: configure devportal Log Level
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^LOG_LEVEL="
    line: LOG_LEVEL="{{ devportal_log_level }}"
  notify: restart devportal

- name: copy pg ssl key
  ansible.builtin.copy:
    src: "{{ devportal_pg_client_ssl_key_file }}"
    dest: "{{ devportal_config_path }}/ssl/pg-client.key"
    mode: '0600'
    owner: "{{ devportal_user }}"
    group: "{{ devportal_group }}"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"
    - devportal_pg_client_ssl

- name: copy pg ssl cert
  ansible.builtin.copy:
    src: "{{ devportal_pg_client_ssl_cert_file }}"
    dest: "{{ devportal_config_path }}/ssl/pg-client.crt"
    mode: '0644'
    owner: "{{ devportal_user }}"
    group: "{{ devportal_group }}"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"
    - devportal_pg_client_ssl

- name: copy pg ssl ca
  ansible.builtin.copy:
    src: "{{ devportal_pg_client_ssl_ca_file }}"
    dest: "{{ devportal_config_path }}/ssl/pg-ca.crt"
    mode: '0644'
    owner: "{{ devportal_user }}"
    group: "{{ devportal_group }}"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"
    - devportal_pg_client_ssl

- name: configure devportal DB TYPE
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^DB_TYPE="
    line: DB_TYPE="{{ devportal_db_type }}"
  notify: restart devportal

- name: configure devportal SQLITE path
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^DB_PATH="
    line: DB_PATH="{{ devportal_data_path }}"
  notify: restart devportal
  when:
    - devportal_db_type == "sqlite"

- name: configure devportal POSTGRESQL Host
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^DB_HOST="
    line: DB_HOST="{{ devportal_pg_host }}"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"

- name: configure devportal POSTGRESQL SSL Type
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^DB_TLS_MODE="
    line: DB_TLS_MODE="{{ devportal_pg_ssl }}"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"
    - devportal_pg_ssl != "disable"

- name: configure devportal POSTGRESQL SSL Client Key path
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^DB_TLS_KEY_FILE="
    line: DB_TLS_KEY_FILE="{{ devportal_config_path }}/ssl/pg-client.key"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"
    - devportal_pg_client_ssl

- name: configure devportal POSTGRESQL SSL Client Cert path
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^DB_TLS_CERT_FILE="
    line: DB_TLS_CERT_FILE="{{ devportal_config_path }}/ssl/pg-client.crt"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"
    - devportal_pg_client_ssl

- name: configure devportal POSTGRESQL SSL CA Cert path
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^DB_TLS_CA_FILE="
    line: DB_TLS_CA_FILE="{{ devportal_config_path }}/ssl/pg-ca.crt"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"
    - devportal_pg_client_ssl

- name: configure devportal POSTGRESQL User
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^DB_USER="
    line: DB_USER="{{ devportal_pg_user }}"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"

- name: configure devportal POSTGRESQL Password
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^DB_PASSWORD="
    line: DB_PASSWORD="{{ devportal_pg_pass }}"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"

- name: configure devportal POSTGRESQL DB Name
  ansible.builtin.lineinfile:
    path: "{{ devportal_config_path }}/devportal.conf"
    regexp: "^DB_NAME="
    line: DB_NAME="{{ devportal_pg_db }}"
  notify: restart devportal
  when:
    - devportal_db_type == "psql"

- name: 'Install DevPortal SELinux policy'
  ansible.builtin.command: "{{ item }}"
  loop:
    - "/usr/sbin/semodule -n -i /usr/share/selinux/packages/devportal.pp"
    - "/usr/sbin/load_policy"
    - "/usr/sbin/restorecon -F -R /usr/bin/nginx-devportal"
    - "/usr/sbin/restorecon -F -R /usr/lib/systemd/system/nginx-devportal.service"
    - "/usr/sbin/restorecon -F -R /var/lib/nginx-devportal"
  when:
    - ansible_os_family == "RedHat"
    - devportal_selinux_apply 

## services

- name: enable devportal
  ansible.builtin.service:
    name: "{{ devportal_service_name }}"
    enabled: yes
  when:
    - devportal_enable | bool

- name: start devportal
  ansible.builtin.service:
    name: "{{ devportal_service_name }}"
    state: started
  when:
    - devportal_start | bool